// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  DatabaseHosts DatabaseHost[]
  UserDatabases UserDatabase[]
  UserApps      UserApp[]
}

model DatabaseHost {
  id            String         @id @unique @default(cuid())
  databaseOwner User           @relation(fields: [id], references: [id], onDelete: Cascade)
  hostname      String
  adminUser     String
  adminPassword String
  adminDatabase String
  sslStrict     Boolean?       @default(true)
  UserDatabases UserDatabase[]

}

model UserDatabase {
  id                 String  @id @unique @default(cuid())
  databaseHostId     String
  databaseOwnerId    String
  clientUsername     String
  clientPassword     String
  clientDatabaseName String?

  databaseHost  DatabaseHost @relation(fields: [databaseHostId], references: [id], onDelete: Cascade)
  databaseOwner User         @relation(fields: [databaseOwnerId], references: [id], onDelete: Cascade)
  connectedApps UserApp[]
}

model UserApp {
  id                String        @id @unique @default(cuid())
  appType           String
  userId            String
  appName           String?
  appRepository     String?
  appBranch         String?
  servicePort       Int?
  appOwner          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceName       String? // We get this back from swarmpit on creation
  connectedDatabaseId    String?
  connectedDatabase UserDatabase? @relation(fields: [connectedDatabaseId], references: [id])

}
